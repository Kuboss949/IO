1;Głównym zadaniem fazy wymagań jest;Jasne okreslenie co? system ma robic;Stwierdzenie jak duzy bedzie system;Okreslenie co? i jak? ma system robic;Jasne okreslenie jak? system ma realizowac zadania
2;Dokument wymagan dotyczy;dokumentacji wymagan stawianych przed tworzonym oprogramowaniem;dokumentacji planu testow kolejnych etapow zycia oprogramowania;dokumentacji funkcji realizujacych kolejne wymagania systemu;dokumentacji etapow realizacji oprogramowania 
3;Dokument wymagan zawiera;specyfikacje wymagan w odniesieniu do tworzonego systemu;liste funkcji realizujacych okreslone wymagania;zestawy testow realizowanych na etapie wymagan;kody procedur realizujacych poszczegolne wymagania 
4;Czy wymagania dla systemu powinny byc poddane testowaniu w kaskadowym modelu cyklu zycia  oprogramowania;nie;tak;to zalezy od dziedziny problemu;czasami 
5;Czy wymagania dla systemu powinny być poddane analizie;tak;nie;to zalezy od dziedziny problemu;czasami
6;Wymagania z poziomu uzytkownika maja postac;ukladu wejsc i wyjsc;informacji o sposobie przetwarzania danych;opisu kolejnych testow;opisu kolejnych procedur
7;Opis wymagan powinien przede wszystkim;opisywac zewnetrzne zachowanie systemu;opisywac dzialanie systemu;opisywac strukture systemu;dokumentowac model systemu
8;Wymagania funkcjonalne opisuja;czynnosci i operacje wykonywane przez system;etapy dzialania systemu;diagramy przejsc;zastosowane metody obiektowe
9;Wymagania niefunkcjonalne opisuja;ograniczenia przy ktorych system bedzie realizowal swoje funkcje;identyfikacje metod i komunikatow;metody zwiazane z podstawowymi klasami systemu;funkcje nie zwiazane z algorytmem podstawowym systemu 
10;Specyfikacji wymagan sluzy;formularz opisu wymagan;lista metod;lista klas;formularz testow
11;Dla poprawnej realizacji wymagan funkcjonalnych konieczne jest wprowadzenie;hierarchii wymagan;macierzy sladu;macierzy odwrotnej sladu;hierarchii testow 
12;Wymagana wielkosc bufora PAO oraz strony pamieci RAM przy defionowaniu sposobu dzialania  systemu naleza do wymagan;niefunkcjonalnych;systemowych;funkcjonalnych;wewnetrznych
13;Celem fazy analizy jest odpowiedz na pytanie;jak system ma dzialac;co system ma robic;kiedy system ma dzialac;jak system ma zostac zaimlementowany
14;Wynikiem fazy analizy jest;model logiczny systemu opisujacy sposob realizacji postawionych wymagan;model fizyczny systemu, opisujacy jego funkcje;model logiczny systemu wskazujacy na jego ograniczenia;model fizyczny systemu wskazujacy na jego ograniczenia 
15;Celem fazy projektowania jest odpowiedz na pytanie;jak system ma zostac zaimplementowany?;jak system ma zostac udekumentowany?;jak system ma zostac zapisany?;jak system ma zostac przetestowany? 
16;Model analityczny budowanego oprogramowania powinien byc;uproszczonym opisem systemu, wskazujacym istotne jego cechy;szczegolowo przetestowany;gotowy do numerycznej implementacji;zgodny z oczekiwaniami uzytkownika
17;Transformacja od srodowiska do kodu obejmuje kolejne modele;srodowisko, model srodowiska, model kodu, kod;srodowisko, model numeryczny, kod;srodowisko, model matematyczny, model numeryczny, kod;srodowisko, opis numeryczny, model kodu, kod
18;Metody strukturalne tworzenia oprogramowania wyrozniaja w systemie;skladowe pasywne i skladowe aktywne;bloki funkcji i bloki operacji;struktury danych zwiazane jedynie z funkcjami jednoparametrowymi;obiekty i dzialajace na nie metody
19;Metody obiektowe tworzenia oprogramowania bazuja na wprowadzeniu;skladowych laczacych dane z metodami;skladowych pasywnych (danych) i aktywnych (funkcji);skladowych prostych i zlozonych o roznej dlugosci;skladowych lokalnych i globalnych
20;Obiekt na etapie analizy jest to;skladowa dziedziny problemu posiadajaca tozsamosc, stan i zachowanie;konstrukcja jezyka programowania, laczaca dane i metody;skladowa dziedziny problemu posiadajaca nazwe, pola i atrybuty;konstrukcja jezyka formalnego sluzacego notacji strukturalnej 
21;Klasa na etapie analizy oznacza;wzorzec grupy obiektow o podobnych stanach i zachowaniu;konstrukcje modelu obiektowego;skladowa dziedziny problemu charakteryzowana przez stan;wzorzec dla metod stosowanych w systemie
22;Obiekt jest;elementem klasy definiowanym przez tozsamosc, stan i zachowanie;elementem klasy definiowanym przez tozsamosc, metody i atrybuty;elementem klasy definiowanym przez atrybuty, stan i metody;elementem klasy definiowanym przez atrybuty, stan i zachowanie
23;Dla klasy "Samochod" zdefiniowano metode "Sprzedaj_na_raty". Zdefiniowano klase  "samochod_osobowy" ktora jest podklasa klasy "Samochod". Ktore z ponizszych sformulowan jest prawdziwe?;samochod_osobowy dziedziczy wszystkie wlasciowosci klasy samochod;samochod_osobowy dziedzczy tylko atrybuty klasy samochod;samochod_osobowy dziedziczy tylko metody klasy samochod;samochod_osobowy nie ma dostepnych zadnych wlasciowosci
24;Skrot UML oznacza;Unified Modeling Language;User Modified Language;Updated Modified Language;User Modeling Language
25;UML jest graficznym jezykiem sluzacym do;obrazowania, specyfikowania, dokumentowania systemow informatycznych;specyfikowania, kodowania, dokumentowania systemow informatycznych;kodowania, testowania, dokumentowania systemow informatycznych;testowania, dokumentowania, implementacji systemow informatycznych  
26;Ktory z ponizszych jezykow nie pozwala na tworzenie programow w pelni obiektowych;C;C++;Python;C# 
27;Atrybuty klasy to;nazwane wlasciwosci klasy;opis metod klasy;nazwane metody klasy;opisy nazw klasy
28;Metody klasy to;operacje ktorych realizacji mozna wymagac od obiektow danej klasy;operacje zastrzezone w klasie;dzialania realizowane automatyczne na obiektach danej klasy;dzialania realizowane przez atrybuty danej klasy 
29;Dziedziczenie w modelu obiektowym polega na;tworzeniu nowych obiektow o wlasnosciach przodka;tworzeniu nowych metod na podstawie wczesniej zdefiniowanych;tworzeniu nowych konstruktorow na podstawie wczesniej zdefiniowanych;tworzeniu nowych komunikatow na podstawie wczesniej zdefiniowanych 
30;Artefacty to;elementy informacyjne wytworzone w procesie tworzenia oprogramowania;struktury otrzymywane w procesie analizy oprogramowania;obiekty abstrakcyjne powstajace automatycznie;fakty artystyczne wynikajace z procesu tworzenia oprogramowania  
31;Programowanie strukturalne;pozwala na tworzenie konstrukcji proceduralnych;ulatwia hermetyzacje;ulatwia programowanie oparte na zdarzeniach;nie jest dobrym rozwiazaniem dla programow obliczeniowych
32;Przypadki uzycia w UML sluza do okreslenia;ciagow akcji sluzacych realizacji funkcji systemu;uzytkownikow systemu;parametrow systemu odpowiedzialnych za poprawne dzialanie systemu;jedynie odpowiedzi systemu na sytuacje awaryjne 
33;Przypadki uzycia sa zbiorem jednostek opisu dynamiki systemu. Skladaja sie z zestawow  scenariuszy ktore pokazuja;sekwencje interakcji prowadzacych do okreslonego celu;strukture pakietow i komponentow systemu;strukture klas i obiektow wystepujacych w modelu;sekwencje stanow obiektow w trakcie transformacji 
34;Zbadaj ponizszy tekst: Jurek ma teraz 16 lat, to jest dwa razy tyle, ile Wojtek mial wtedy, kiedy Jurek mial tyle, ile Wojtek ma teraz... Wymaganiem dla systemu bedzie specyfikacja;Wojtek jest mlodszy od Jurka o 4 lat;Wojtek jest mlodszy od Jurka o 6 lat;Wojtek jest mlodszy od Jurka o 8 lat;Wojtek jest starszy od Jurka o 8 lat
35;Zbadaj ponizszy tekst: Ojciec ma 42 lata a syn 12, za ile lat ojciec bedzie dwa razy starszy od syna.  Wymaganiem dla systemu analizujacego wiek ojca i syna bedzie specyfikacja;Ojciec bedzie dwa razy starszy od syna za 18 lat;Ojciec bedzie dwa razy starszy od syna za 28 lat;Ojciec jest mlodszy od syna o 30 lat;Ojciec jest starszy od syna o 28 lat 
36;Zbadaj ponizszy cytat z Tolkiena: "Nie kazdy kto bladzi, jest stracony". Czy to znaczy ze;bladzacy moga byc straceni;kazdy kto bladzi nie jest stracony;nie ma straconych bladzacych;nie ma bladzacych niestraconych
37;Zbadaj ponizszy tekst: Do ponumerowania stron gazet stosuje sie co najwyzej 101 cyfr...  Ograniczeniem wymagania dla systemu numerujacego strony bedzie;numeruj nie wiecej niz 55 stron;numeruj nie wiecej niz 45 stron;numeruj nie wiecej niz 65 stron;numeruj nie wiecej niz 101 stron
38;Faza analizy dotyczy nastepujacych etapow cyklu zycia oprogramowania;okreslenia wymagan, specyfikowania i projektowania;okreslenia wymagan, projektowania i kodowania;specyfikowania, projektowania i kodowania;projektowania, kodowania i dokumentacji 
39;Dobor algorytmow i struktur danych odbywa sie w fazie;specyfikacji wymagan;implementacji;projektowania;kodowania
40;Tzw. dobre wymagania dla systemu powinny byc;zwiezle, spojne, wykonalne, latwe do modyfikacji;zwiezle, niespojne, zrozumiale dla uzytkownikow i precyzyjne;spojne, niekompletne, latwe do modyfikacji, wykonalne;jednoznaczne, spojne, niekompletne, precyzyjne 
41;System bedzie przyjmowal dopuszczalne ID pracownika z przedzialu 1-100. Jakie cechy ma takie  wymaganie? Jest ono;zrozumiale, spojne, niekompletne, wykonalne,jasne;zrozumiale, niespojne, kompletne, wykonalne, niejasne;niezrozumiale, spojne, kompletne, niewykonalne jasne;niezrozumiale, niespojne, niekompletne, niewykonalne, niejasne
42;Klasyfikatory w UML-u obejmuja;elementy modelu opisujace graficznie jego zachowanie lub strukture;skladowe klasyfikacji diagramow;elementy dziedziny problemu nie zwiazane z jego struktura;konstrukcja jezyka formalnego sluzacego notacji strukturalnej 
43;Do wlasnosci, wlasciwosci klasy zaliczamy;atrybuty i operacje;klasyfikatory i instancje;artefacty i metody;obiekty i pakiety 
44;Klasa jest charakteryzowana przez;nazwe, stan i metody;stan, zawartosc i zaawansowanie;stan, budowe i przeznaczenie;nazwe, stan i historie
45;Dwie klasy sa w zwiazku generalizacji-specjalizacji jezeli jedna z nich;zwana generalizacja jest uogolnieniem drugiej, specjalizacji;zwana specjalizacja jest uogolnieniem drugiej, generalizacji;zwana specjalizacja jest uzupelnieniem drugiej, generalizacji;zwana generalizacja jest uzupelnieniem drugiej, specjalizacji 
46;Czy dla danej specjalizacji moze istniec wiele generalizacji;tak;nie, moze istniec tylko jedna;tak, pod warunkiem wprowadzenia zwiazku kwalifikowanego;nie, chyba ze zostanie wprowadzony zwiazek kwalifikowany
47;W zwiazku kwalifikowanym klas: student - gr_studencka, gdzie kwlifikatorem jest kierunek_stud i rok_akade;klasa student jest specjalizacja, klasa gr_studencka jest generalizacja;klasa student jest generalizacja, klasa gr_studencka jest specjalizacja;klasa student jest generalizacja, klasa kierunek_stud jest specjalizacja;klasa gr_studencka jest generalizacja, klasa rok akade jest specjalizacja 
48;Dynamiczne zachowanie sie systemu jest modelowane poprzez;zdarzenie, stan, przejscie stanu, akcje, operacje;ograniczenia, algorytm, przejscie stanu, akcje, operacje;algorytm, struktury danych, operacje, zdarzenie;strukture danych, stan, akcje, operacje
49;Diagramy przejsc stanow opisuja;akcje i operacje systemu przeprowadzajace system pomiedzy stanami;stan systemu pomiedzy kolejnymi zdarzeniami;sposob testowania systemu;zasady implementacji systemu 
50;Asocjacja jest relacja;laczaca dwie lub wiecej klas;generalizacji - specjalizacji;zawierania;typu include 
51;Weryfikacja klas i obiektow pozwala na usuniecie elementow zbednych. Usuwamy klasy dla ktorych;brak pol i metod lub jeden obiekt w klasie lub brak zwiazku z innymi klasami;istnieje wiele pol i metod;istnieje zwiazek z innymi klasami;dla wielu pol istnieje jedynie jedna metoda
52;Identyfikacja zwiazkow klas i obiektow ma na celu;uogolnienie wielu zwiazkow zachodzacych pomiedzy obiektami danej klasy;wyszczegolnienie podstawowych metod w klasach i obiektach;uogolnienie zaleznosci pomiedzy poszczegolnymi wymaganiami systemu;uogolnienie metod danej klasy
53;Zwiazek klas generalizacji - specjalizacji wskazuje na;dziedziczenie pol i metod;polimorfizm tych klas;zdarzenie powodujace przejscie stanow w poszczegolnych klasach;operacje wywolane przez metody klasy generalizacji
54;Identyfikacja i definiowanie pol klasy polega miedzy innymi na wprowadzeniu;wszystkich pol opisujacych mozliwe stany obiektow danej klasy;zwiazkow generalizacji - specjalizacji pomiedzy obiektami danej klasy;relacji agregacji wsrod obiektow danej klasy;wszystkich obiektow definiujacych dana klase 
55;Do metod realizowanych w modelu obiektowym zaliczamy miedzy innymi;Metody ustawiania zwiazkow pomiedzy obiektami, destruktory, konstruktory;Konstruktory, destruktory, metody pobierania wartosci pol, przerwania;Metody edycji pol, konstruktory, procesy, destruktory;Konstruktory, metody pobierania/ustawiania wartosci pol, obsluga zlecenia 
56;Agregacja w UML-u jest;rodzajem asocjacji wskazujacej na zawieranie sie klas;zwiazkiem pomiedzy pakietami;realacja mnogosciowa jeden do jednego;zwiazkiem generalizacji - specjalizacji
57;Wymagania w jezyku naturalnym przyjmuja postac: System czekowy ma na celu obsluge kont czekowych. System ten musi miec mozliwosc przetwarzania takich transakcji na koncie jak wplata i  wyplata dla wielu kont... Potencjalnymi klasami sa;system czekowy: konto czekowe, transakcja, wplata, wyplata, czek;system czekowy: cel, transakcja, wplata, wyplata, czek;system czekowy: konto czekowe, cele systemu, wplata, wyplata, czek;system czekowy: konto czekowe, mozliwosci systemu, wplata, wyplata, czek
58;Glowne pojecia obiektowosci to;klasy, obiekty, dziedziczenie, polimorfizm;atrybuty, obiekty, pola, struktury;struktury, dane pasywne, dane aktywne, obiekty;klasy obiektow, struktury danych, metody, funkcje 
59;Obligatoryjnosc zwiazkow obiektow klas oznacza;koniecznosc utworzenia klasy obligatoryjnej;koniecznosc tworzenia uzupelnienia danego obiektu;koniecznosc utworzenia zwiazku agregacji;zadna z wyzej wymienionych 
60;Zwiazek agregacji w grupie studenckiej polega na tym, ze;cala grupe studencka stanowi scisle okreslona grupa osob;w sklad grupy wchodzi wielu studentow i wiele studentek;sklad grupy studenckiej jest zmienny;w sklad grupy studenckiej wchodzi co najmniej 25 osob
61;Korzystajac z jezyka UML nie mozna;stworzyc modelu dowolnego bytu;stworzyc modelu systemu obiektowego;stworzyc modelu procesu gospodarczego;stworzyc modelu przeplywu danych 
62;DFD's (data flow diagrams) sa podstawa;modelowania proceduralnego;modelowania obiektowego;modelowania matematycznego;modelowania komputerowego 
63;Wyodrebnij cztery klasy z ponizszego opisu problemu: Klient korzysta z systemu, aby pobrac, i aby  sprawdzic stan swojego konta. Klient musi wlozyc karte do bankomatu, wprowadzic swoj numer PIN.  Klient posiada numer PIN, nazwisko i imię, numer konta. Drukujac saldo klient oczekuje otrzymania  aktualnego stanu jego konta, oraz historie transakcji;Klient, konto, bankomat, system;Klient, konto, PIN, historia;System bankowy Sumes, konto nr 1010101010101, Jan Kowalski, bank PKO BP;Konto, system, transakcja, drukowanie
64;Wyodrebnij pary klasa (K) i jej obiekt (O):Klient Jan Kowalski przychodzi do bankomatu nr 100 przy ul. Wroclawskiej by  pobrac pieniadze. Podaj nr PIN, oraz kwote do wyplaty. Bankomat sprawdza poprawnosc danych i wyplaca pieniadze;K-Klient O-Jan Kowalski, K-bankomat O-nr100;K-Klient O-Sprawdzenie danych, K-Bankomat O-wyplata pieniedzy;K-Operacja O-Kwota, K-System O-klient;K-Pieniadze O-euro, K-Dane O-PIN 
65;Modelowanie strukturalne i modelowanie proceduralne;to jest to samo;roznia sie podejsciem do statyki systemu;roznia sie podejsciem do dynamiki systemu;uzupelniaja sie na wzajem
66;W ktorej fazie nastepuje wybor jezyka programowania wykorzystywanego w projekcie;w fazie implementacji;w fazie strategicznej;w fazie okreslania wymagan;w żadnej z powyzszych
67;Dla klasy "Samochod" zdefiniowano metode "Sprzedaj_na_raty". Zdefiniowano klase  "samochod_osobowy" ktora jest podklasa klasy "Samochod". Ktore z ponizszych sformulowan jest prawdziwe?;samochod_osobowy dziedziczy wszystkie wlasciowosci klasy samochod;samochod_osobowy dziedzczy tylko atrybuty klasy samochod;samochod_osobowy dziedziczy tylko metody klasy samochod;samochod_osobowy nie ma dostepnych zadnych wlasciowosci 
68;Wyodrebnij obiekty (O) i wlasciowosci (W)Klient Jan Kowalski przychodzi do bankomatu nr 100 przy ul. Wroclawskiej by pobrac pieniadze. Podaj  nr PIN, oraz kwote do wyplaty. Bankomat sprawdza poprawnosc danych i wyplaca pieniadze;O-Jan Kowalski, W-PIN=1010, O-bankomat 100 W-adres="Wroclawska;O-Jan Kowalski, W-PIN=1010, O-bankomat W-wyplac pieniadze;O-Jan Kowalski, W-wyplac pieniadze, O-bankomat W-adres="Wroclawska";O-Klient, W-Jan Kowalski, O-bankomat W-kolor
69;Symbol klasy zawiera;role;nazwe zwiazku;metody;czynnosc
70;Ktory z ponizszych jezykow zostal stworzony do modelowania systemow obiektowych;UML;XML;CSL;C#
71;Diagramy sekwencji w modelowaniu dynamiki systemu pokazuja;nastepstwo czasowe w sekwencji komunikatow wymienianych miedzy obiektami;przebieg czynnosci w sekwencji zmiany stanu obiektow;zmiane stanu obiektow;nastepstwo stanow obiektow w sekwencji czasu 
72;Diagram opisu interakcji jest;obrazowaniem kolejnych czynnosci w ciagu kolejnych interakcji;polaczeniem diagramu interakcji i nastepstw;obrazowaniem stanow obiektow w sekwencji komunikatow;polaczeniem diagramu pakietow i komponentow
73;OMG jest organizacja o nazwie;Object Management Group;Object Marketing Group;Object Marketing Goal;Object Management Global
74;Tworzenie systemow sterowane modelami polega na transformacji kolejno pomiedzy modelami?;srodowiska, wymagan, systemu, podsystemu;matematycznym, logicznym, srodowiskiem;logicznym, fizycznym, rzeczywistym;srodowiska, logicznym, matematycznym,numerycznym 
75;Modele w tworzeniu oprogramowania sterowanego modelami stanowia;zestawy odpowiednich diagramow struktury i dynamiki systemu;opis rzeczywistego zachowania sie systemu;opis logicznego zachowania sie systemu;zestawy odpowiednich funkcjonalnosci systemu
76;Architektura trojwarstwowa dla systemu "obslugi zamowien" najczesciej obejmuje podsystemy;interfejs uzytkownika, reguly biznesowe, baza danych;przyjmowania zamowien, wysylania przesylek, obslugi platnosci;interfejs uzytkownika, wysylanie przesylek, baza danych;przyjmowanie zamowien, obsluga platnosci, interfejs uzytkownika
77;Wzorzec potokow i filtrow bazuje na;zaleznosci poszczegolnych podsystemow od strumienia danych na stosie;swobodnym dostepie do dowolnych danych;niezaleznosci podsystemow od strumienia danych;scislej zaleznosci poszczegolnych podsystemow 
78;Wzorzec architektury obiektowej bazuje na;podsystemach zdefiniowanych wokol danych i zwiazanych z nimi funkcji;zaleznosci poszczegolnych podsystemow od strumienia danych na stosie;scislej zaleznosci poszczegolnych podsystemow;swobodnym dostepie do dowolnych danych 
79;Ktora z ponizszych cech nie jest charakterystyczna dla programowania ekstremalnego;podejscie kaskadowe;programowanie w parach;testy jednostkowe;bezposrednia wspołpraca z klientem
80;Sformulowanie 'Make it work, make it right, make it fast' jest charakterystyczne dla;programowania ekstremalnego;modelu spiralnego wytwarzania oprogramowania;modelowania aspektowego;modelu kaskadowego wytwarzania oprogramowania
81;Celem fazy projektowania jest;transformacja pomiedzy modelami opisowym i specyfikacji?;transformacja pomiedzy modelami opisowym i wymagan?;transformacja pomiedzy modelami specjalizacji i numerycznym?;transformacja pomiedzy modelami numerycznym i cyfrowym?
82;Na diagramie UML związek agregacji jest oznaczony;odcinkiem zakonczonym pustym rombem;odcinkiem zakonczonym wypelnionym rombem;odcinkiem zakonczonym okregiem;tylko odcinkiem 
83;Odcinkiem zakończonym pełnym rombem na diagramie UML oznacza się;kompozycje;agergacje;skojarzenie;dziedziczenie
84;W opisie przypadku użycia wyzwalacz to;Zdarzenie powodujace rozpoczecie przypadku uzycia;Warunki spelnione po pomyslnym wykonaniu glownego scenariusza przypadku uzycia;zdarzenie powodujace zakonczenie przypadku uzycia;warunki ktore musza byc spelnione przed wykonaniem przypadku uzycia
85;Na diagramie klas UML oznaczenia widoczności pol +,#,- oznaczają kolejno;public, protected, private;private, protected, static;public, private, protected;public, abstract, protected
86;Metoda abstrakcyjna jest to;metoda nie posiadajaca implementacji;metoda dziedziczona z klasy abstrakcyjnej;metoda niewidoczna dla innych klas;nie istnieje takie pojecie 
87;Pola oznaczone znaczkiem widocznosci #;sa widoczne tylko w ramach klasy i klas pochodnych;sa widoczne tylko w ramach jednej klasy;sa widoczne wszedzie;sa niewidoczne
88;Na diagramie UML przypadków użycia są następujące elementy;aktorzy, przypadki uzycia, relacje;aktorzy, przypadki uzycia, klasy;przypadki uzycia, relacje, obiekty;relacje, aktorzy, punkty zwrotne 
89;Klasę abstrakcyjna na diagramie UML oznacza sie poprzez;czcionke pochyla;podkreslenie;pogrubienie;dodanie slowka abstract
90;Związek uogólnienia na diagramach UML oznacza sie;odcinkiem zakonczonym trojkatem wskazuacym klase nadrzedna;odcinkiem zakonczonym trojkatem wskazujacym klase podrzedna;odcinkiem zakonczonym rombem wskazujacym klase nadrzedna;odcinkiem zakonczonym rombem wskazujacym klase podrzedna
91;Przypadki użycia na diagramach UML oznacza sie jako;owale;prostokaty;romby;trapezy 
92;Aktorów na diagramie UML oznacza się jako;schematyczna postac;wypelniony kwadrat;wypelniony okrag;schematyczna glowe 
93;Gwarancje powodzenia przypadków użycia to;warunki spelnione po pomyslnym wykonaniu scenariusza powodzenia;warunki spelnione po uruchomieniu przypadku uzycia;warunki jakie zapewnia system by przypadek zakonczyl sie powodzeniem;warunki poczatkowe, wymagany by przypadek mogl sie rozpoczac 
94;Co to jest diagram DFD?;diagram przeplywu danych;diagram struktury bazy danych; diagram opisujacy strukture klas;diagram przypadkow uzycia
95;Klasa jest;abstrakcyjnym typem danych;rzeczywistym typem danych;rozproszonym typem danych;skupionym typem danych 
96;Atestowanie jest procesem związanym z;prowadzeniem procesu testowego przez klienta;prowadzeniem procesu testowego przez audytora projektu;prowadzeniem procesu testowego przez uzytkownikow systemu;prowadzeniem procesu testowego przez czlonkow zespolu projektowego 
97;Model fizyczny systemu stanowiący o jego architekturze fizycznej jest reprezentowany przez;model (diagram) wdrożenia;model (diagram) czynnosci;model (diagram) przypadkow uzycia;model (diagram) pakietow i komponentow 
98;Obiekt w modelowaniu obiektowym reprezentuje;abstrakcyjny typ danych;rzeczywisty typ danych;hierarchiczny typ danych;uwarunkowany typ danych 
99;Model spiralny Boehma wymaga procesu ewolucyjnego w czterech aspektach ponizej;planowania, analiza ryzyka, konstrukcja iteracji, atestowanie;planowanie, projektowanie, konstrukcja iteracji, testowanie;modelowanie, projektowanie, kodowanie, atestowanie;modelowanie, kodowanie, testowanie, utrzymanie
100;Diagram use case w UML służy do określenia;scenariuszy funkcjonalności systemu;uzytkownikow systemu;parametrow systemu odpowiedzialnych za poprawne dzialanie systemu;jedynie odpowiedzi systemu na sytuacje awaryjne
101;Proces doboru technologii implementacji odbywa się na etapie;budowania modelu specyfikacji;budowania modelu numerycznego;transformacji modelu numerycznego do modelu cyfrowego;transformacji systemu do uzytkownika
102;Głownym zadaniem fazy projektu jest;Jasne określenia jak System ma realizować zadania;Jasne okreslenie co? System ma robic?;Stwierdzenie jak duzy bedzie system;okreslenie co? I jak? System ma robic?
103;Testy funkcjonalne obejmują?;Testowanie systemu jako czarnej skrzynki o okreslonej funkcjonalnosci;Testowanie zalozen systemu;Testowanie systemu jako bialej skrzynki z pelna interpretacja kolejnych instrukcji;Testowanie poszczegolnych metod w klasach 
104;Czy wymagania dla systemu powinny być poddane analizie w FAZIE KODOWANIA;Nie;Tak;To zalezy od dziedziny problemu;Czasami
105;UML pozwala na graficzna budowe;modeli numerycznych zdekomponowanego modelu opisowego;modeli statycznych zdekomponowanego modelu rzeczywistosci;modeli dynamicznych zdekomponowanego modelu opisowego;modeli praktycznych zdekomponowanego modelu opisowego 
106;Podejście słownikowe do budowy modelu obiektowego wymaga;identyfikacji rzeczowników jako obiektów;identyfikacji dziedziny slownikowej problemu;zwyczajowego podejscia do modelu opisowego;modeli praktycznych zdekomponowanego modelu opisowego
107;Co to COCOMO;Model szacowania liczby osobogodzin w procesie tworzenia oprogamowania;Jebać legie;Maupa z dupom;Subsaharyjskie IQ
108;Co to KDSI;Szacowana liczba linii kodu;Szuster kox;Kocham TO;UML
109;Budowa systemów informatycznych modelujących wycinek rzeczywistosci sklada sie z dwoch podstawowych procesow;analizy i syntezy;kodowania i testowania;zbierania wymagan i wdrozenia;specyfikacji i modelowania
110;Macierz śladu pozwala na;sprawdzenie realizacji wszystkich wymagam przez podsystemy;jednoznaczne odwzorowanie kodu systemu na jego wymagania;wlasciwy dobor technologii implementacyjnej;odpowiednia specyfikacje wymagan systemu 
111;Testy statyczne bazują na;analizie kodu;wynikach testowych uruchomien programu;analizie dokumentacji;na wynikach testow akceptacji-alfa 
112;Dekompozycja pozwala na jednoznaczną transformacje pomiędzy;modelem opisowym a modelem specyfikacji;modelem specyfikacji a modelem numerycznym;modelem numerycznym a modelem cyfrowym;modelowana rzeczywistoscia a modelem cyfrowym 
113;Model logiczny systemu stanowiący o jego architekturze logicznej jest reprezentowany przez;model (diagram) czynności;model (diagram) wdrozenia;model (diagram) przypadkow uzycia;model (diagram) pakietow i komponentow 
114;Szacowanie występujących kosztów oprogramowania;ocenie kosztów oprogramowania;model numeryczny zdekomponowanego systemu;model statyczny zdekomponowanego systemu;dekompozycja oprogramowania do jego elementarnej funkcjonalnosci i jej wartosciowania
115;Modelowanie strukturalne i modelowanie proceduralne;to sa synonimy tego samego typu modelowania;to sa synonimy tego samego typu wdrozenia;roznia sie podejsciem do statyki systemu;roznia sie podejsciem do dynamiki systemu
116;W której fazie następuje wybór języka programowania wykorzystywanego w fazie kodowania;w fazie strategicznej;w fazie okreslania wymagan;w fazie implementacji;w zadnej z powyzszych 
117;Transformacja od środowiska do kodu obejmuje kolejne modele (wskaż właściwe sekwencje);środowisko, model środowiska, model kodu, model cyfrowy;srodowisko, model numeryczny, kod, model cyfrowy;srodowisko, model matematyczny, model numeryczny,kod;srodowisko, opis numeryczny, model kodu, kod 
118;Proces SYNTEZY oprogramowania obejmuje fazy transformacji pomiędzy modelami;cyfrowym a wdrozeniem wraz z testowaniem;numerycznym a cyfrowym wraz z testowaniem;specyfikacji a numerycznym wraz z testowaniem;opisowym a specyfikacji wraz z testowaniem 
119;Który z języków zaprojektowany do graficznego modelowania systemow obiektowych;UML;Fortran;CSL;C#
120;Model kaskadowy wytwarzania oprogramowania z rozbudowanym testowaniem wymaga;wprowadzenia testowania elementow kazdej fazy modelu kaskadowego;wprowadzenia fazy testowania systemu po jego implementacji;wprowadzenia testowania jedynie zbudowanych modeli numerycznych;wprowadzenia jedynie szczegolowej analizy opracowanego kodu systemu
121;Model kaskadowy wytwarzania oprogramowania z rozbudowanym testowaniem wymaga:;wprowadzenia testowania elementółw każdej fazy modelu kaskadowego;wprowadzenia fazy testowania systemu po jego implementacji;wprowadzenia testowania jedynie zbudowanych modeli numerycznych;wprowadzenia jedynie szczegĂłĹ?owej analizy opracowanego kodu systemu
122;Głównym zadaniem fazy wymagań jest:;Jasne określenie co? system ma robić;Stwierdzenie jak duży będzie system;Określenie co? i jak? ma system robić;Jasne określenie jak? system ma realizować zadania
123;Dokument wymagań dotyczy:;dokumentacji wymagań stawianych przed tworzonym oprogramowaniem;dokumentacji planu testów kolejnych etapów zżycia oprogramowania;dokumentacji funkcji realizujących kolejne wymagania systemu;dokumentacji etapów realizacji oprogramowania
124;Dokument wymagań zawiera:;specyfikacje wymagań w odniesieniu do tworzonego systemu;listę funkcji realizujących określone wymagania;zestawy testów realizowanych na etapie wymagań;kody procedur realizujących poszczególne wymagania
125;Czy wymagania dla systemu powinny być poddane testowaniu w kaskadowym modelu cyklu życia oprogramowania:;nie;tak;czasami;to zależy od dziedziny problemu
126;Czy wymagania dla systemu powinny być poddane analizie;tak;nie;czasami;to zależy od dziedziny problemu
127;Wymagania z poziomu użytkownika maja postać:;układu wejść i wyjść;informacji o sposobie przetwarzania danych;opisu kolejnych testów;opisu kolejnych procedur
128;Opis wymagań powinien przede wszystkim:;opisywać zewnętrzne zachowanie systemu;dokumentować model systemu;opisywać strukturę systemu;opisywać działanie systemu
129;Wymagania funkcjonalne opisują:;czynności i operacje wykonywane przez system;etapy działania systemu;diagramy przejść;zastosowane metody obiektowe
130;Wymagania niefunkcjonalne opisują:;ograniczenia przy których system będzie realizował swoje funkcje;identyfikacje metod i komunikatów;metody związane z podstawowymi klasami systemu;funkcje nie związane z algorytmem podstawowym systemu
131;Specyfikacji wymagań służy:;formularz opisu wymagań;lista metod;lista klas;formularz testów
132;Dla poprawnej realizacji wymagań funkcjonalnych konieczne jest wprowadzenie:;hierarchii wymagań;macierzy odwrotnej śladu;hierarchii testów;macierzy śladu
133;Wymagana wielkość bufora PAO oraz strony pamięci RAM przy definiowaniu sposobu działania systemu należą do wymagań:;niefunkcjonalnych;systemowych;funkcjonalnych;wewnętrznych
134;Celem fazy analizy jest odpowiedz na pytanie:;jak system ma działać (jak system ma realizować swoje funkcjonalności);co system ma robić;kiedy system ma działać;jak system ma zostać zaimplementowany
135;Wynikiem fazy analizy jest:;model logiczny systemu opisujący sposób realizacji postawionych wymagań;model fizyczny systemu, opisujący jego funkcje;model logiczny systemu wskazujący na jego ograniczenia;model fizyczny systemu wskazujący na jego ograniczenia
136;Celem fazy projektowania jest odpowiedz na pytanie:;jak system ma zostać zaimplementowany?;jak system ma zostać przetestowany?;jak system ma zostać udokumentowany?;jak system ma zostać zapisany?
137;Model analityczny budowanego oprogramowania powinien być:;uproszczonym opisem systemu, wskazującym istotne jego cechy, uproszczonym opisem systemu na poziomie abstrakcji;szczegółowo przetestowany;gotowy do numerycznej implementacji;zgodny z oczekiwaniami użytkownika
138;Transformacja od środowiska do kodu obejmuje kolejne modele:;środowisko, model środowiska, model kodu, kod;środowisko, model numeryczny, kod;środowisko, model matematyczny, model numeryczny, kod;środowisko, opis numeryczny, model kodu, kod
139;Metody strukturalne tworzenia oprogramowania wyróżniają w systemie:;składowe pasywne i składowe aktywne;bloki funkcji i bloki operacji;struktury danych związane jedynie z funkcjami jednoparametrowymi;obiekty i działające na nie metody
140;Metody obiektowe tworzenia oprogramowania bazują na wprowadzeniu:;składowych łączących dane z metodami;składowych pasywnych (danych) i aktywnych (funkcji);składowych prostych i złożonych o rożnej długości;składowych lokalnych i globalnych
141;Obiekt na etapie analizy jest to:;składowa dziedziny problemu posiadająca tożsamość, stan i zachowanie;konstrukcja języka programowania, łącząca dane i metody;składowa dziedziny problemu posiadająca nazwę, pola i atrybuty;konstrukcja jeżyka formalnego służącego notacji strukturalnej
142;Klasa na etapie analizy oznacza:;wzorzec grupy obiektów o podobnych stanach i zachowaniu;wzorzec dla metod stosowanych w systemie;składowa dziedziny problemu charakteryzowana przez stan;konstrukcje modelu obiektowego
143;Obiekt jest;elementem (instancją) klasy definiowanym przez tożsamość, stan i zachowanie;elementem klasy definiowanym przez tożsamość, metody i atrybuty;elementem klasy definiowanym przez atrybuty, stan i metody;elementem klasy definiowanym przez atrybuty, stan i zachowanie
144;Dla klasy "Samochód" zdefiniowano metodę "Sprzedaj_na_raty". Zdefiniowano klasę "samochod_osobowy" która jest podklasa klasy "Samochód". Które z poniższych sformułowań jest prawdziwe?;samochod_osobowy dziedziczy wszystkie właściwości klasy samochód;samochod_osobowy dziedziczy tylko atrybuty klasy samochód.;samochod_osobowy dziedziczy tylko metody klasy samochód;samochod_osobowy nie ma dostępnych żadnych właściwości
145;Skrót UML oznacza:;Unified Modeling Language;User Modified Language;Updated Modified Language;User Modeling Language
146;UML jest graficznym językiem służącym do:;obrazowania, specyfikowania, dokumentowania systemów informatycznych i tworzenia;specyfikowania, kodowania, dokumentowaniasystemów informatycznych;kodowania, testowania, dokumentowania systemów informatycznych;testowania, dokumentowania, implementacji systemów informatycznych
147;Który z poniższych języków nie pozwala na tworzenie programów w pełni obiektowych;C;C++;Python;C#
148;Atrybuty klasy to:;nazwane właściwości klasy;opis metod klasy;nazwane metody klasy;opisy nazw klasy
149;Dziedziczenie w modelu obiektowym polega na:;Tworzeniu nowych obiektów o własnościach przodka (powoływaniu);tworzeniu nowych metod na podstawie wcześniej zdefiniowanych;tworzeniu nowych konstruktorów na podstawie wcześniej zdefiniowanych;tworzeniu nowych komunikatów na podstawie wcześniej zdefiniowanych
150;Artefacty to:;elementy informacyjne wytworzone w procesie tworzenia oprogramowania lub abstrakcyjne elementy informacyjne używane przy tworzeniu oprogramowania;struktury otrzymywane w procesie analizy oprogramowania;obiekty abstrakcyjne powstające automatycznie;fakty artystyczne wynikające z procesu tworzenia oprogramowania
151;Programowanie strukturalne:;pozwala na tworzenie konstrukcji proceduralnych -> pozwala na budowanie modeli numerycznych i obiektowych;ułatwia programowanie oparte na zdarzeniach i procedurach;nie jest dobrym rozwiązaniem dla programów obliczeniowego;jest dobrym rozwiązaniem dla programów wielowątkowych
152;Przypadki użycia w UML służą do określenia:;ciągów akcji służących realizacji funkcji systemu;użytkowników systemu;parametrów systemu odpowiedzialnych za poprawne działanie systemu;jedynie odpowiedzi systemu na sytuacje awaryjne
153;Zbadaj poniższy tekst: Jurek ma teraz 16 lat, to jest dwa razy tyle, ile Wojtek miał wtedy, kiedy Jurek miał tyle. Ile Wojtek ma teraz... Wymaganiem dla systemu będzie specyfikacja:;Wojtek jest młodszy od Jurka o 4 lat;Wojtek jest młodszy od Jurka o 6 lat;Wojtek jest młodszy od Jurka o 8 lat;Wojtek jest starszy od Jurka o 8 lat
154;Zbadaj poniższy tekst: Ojciec ma 42 lata a syn 12, za ile lat ojciec będzie dwa razy starszy od syna. Wymaganiem dla systemu analizującego wiek ojca i syna będzie specyfikacja:;Ojciec będzie dwa razy starszy od syna za 18 lat;Ojciec będzie dwa razy starszy od syna za 28 lat;Ojciec jest młodszy od syna o 30 lat;Ojciec jest starszy od syna o 28 lat
155;Zbadaj poniższy cytat z Tolkiena: Nie każdy kto błądzi, jest stracony. Czy to znaczy ze:;błądzący mogą być straceni;każdy kto bladzi nie jest stracony;nie ma straconych błądzących;nie ma błądzących niestraconych
156;Zbadaj poniższy tekst: Do ponumerowania stron gazet stosuje się co najwyżej 101 cyfr...Ograniczeniem wymagania dla systemu numerującego strony będzie:;numeruj nie więcej niż 55 stron;numeruj nie więcej niż 45 stron;numeruj nie więcej niż 65 stron;numeruj nie więcej niż 101 stron
157;Faza analizy dotyczy następujących etapów cyklu życia oprogramowania:;określenia wymagań, specyfikowania i projektowania;określenia wymagań, projektowania i kodowania; specyfikowania, projektowania i kodowania;projektowania, kodowania i dokumentacji
158;Dobór algorytmów i struktur danych odbywa się w fazie:;projektowania;specyfikacji wymagań;implementacji;kodowania
159;Tzw. dobre wymagania dla systemu powinny być:;zwięźle, spójne, wykonalne, łatwe do modyfikacji;zwięźle, niespójne, zrozumiale dla użytkowników i precyzyjne;spójne, niekompletne, łatwe do modyfikacji, wykonalne;jednoznaczne, spójne, niekompletne, precyzyjne
160;System będzie przyjmował dopuszczalne ID pracownika z przedziału 1-100. Jakie cechy ma takie wymaganie? Jest ono:;zrozumiale, spójne, niekompletne, wykonalne, jasne;zrozumiale, niespójne, kompletne, wykonalne, niejasne;niezrozumiale, spójne, kompletne, niewykonalne jasne;niezrozumiale, niespójne, niekompletne, niewykonalne, niejasne
161;Klasyfikatory w UML-u obejmują:;elementy modelu opisujące graficznie jego zachowanie lub strukturę;składowe klasyfikacji diagramów;elementy dziedziny problemu nie związane z jego struktura;konstrukcja jeżyka formalnego służącego notacji strukturalnej
162;Do własności, właściwości klasy zaliczamy:;atrybuty i operacje;klasyfikatory i instancje;artefacty i metody;obiekty i pakiety
163;Klasa jest charakteryzowana przez:;nazwę, stan i metody;stan, zawartość i zaawansowanie;stan, budowę i przeznaczenie;nazwę, stan i historie
164;Dwie klasy są w związku generalizacji-specjalizacji jeżeli jedna z nich:;zwana generalizacja jest uogólnieniem drugiej, specjalizacji - specjalizacja jest rodzajem drugiej, generalizacji;zwana specjalizacja jest uogólnieniem drugiej, generalizacji;zwana specjalizacja jest uogólnieniem drugiej, generalizacji;zwana generalizacja jest uogólnieniem drugiej, specjalizacji
165;Czy dla danej specjalizacji może istnieć wiele generalizacji:;tak;nie, może istnieć tylko jedna;tak, pod warunkiem wprowadzenia związku kwalifikowanego;nie, chyba ze zostanie wprowadzony związek kwalifikowany
166;W związku kwalifikowanym klas: student - gr_studencka, gdzie kwalifikatorem jest kierunek_stud i rok_akade:;klasa student jest specjalizacja, klasa gr_studencka jest generalizacja;klasa student jest generalizacja, klasa gr_studencka jest specjalizacja;klasa student jest generalizacja, klasa kierunek_stud jest specjalizacja;klasa gr_studencka jest generalizacja, klasa rok akade jest specjalizacja
167;Dynamiczne zachowanie się systemu jest modelowane poprzez:;zdarzenie, stan, przejście stanu, akcje, operacje;ograniczenia, algorytm, przejście stanu, akcje, operacje;algorytm, struktury danych, operacje, zdarzenie;strukturę danych, stan, akcje, operacje
168;Diagramy przejść stanów opisują:;akcje i operacje systemu przeprowadzające system pomiędzy stanami;stan systemu pomiędzy kolejnymi zdarzeniami;sposób testowania systemu;zasady implementacji systemu
169;Asocjacja jest relacja:;łącząca dwie lub więcej klas;generalizacji - specjalizacji;zawierania;typu include
170;Weryfikacja klas i obiektów pozwala na usuniecie elementów zbędnych. Usuwamy klasy dla których:;brak pól i metod lub jeden obiekt w klasie lub brak związku z innymi klasami;istnieje wiele pól i metod;istnieje związek z innymi klasami;dla wielu pól istnieje jedynie jedna metoda
171;Identyfikacja związków klas i obiektów ma na celu:;uogólnienie wielu związków zachodzących pomiędzy obiektami danej klasy/ uogólnienie wielu pojedynczych związków pojawiających się między obiektami tych klas;wyszczególnienie podstawowych metod w klasach i obiektach; uogólnienie zależności pomiędzy poszczególnymi wymaganiami systemu;uogólnienie metod danej klasy
172;Związek klas generalizacji - specjalizacji wskazuje na:;dziedziczenie pól i metod;polimorfizm tych klas;zdarzenie powodujące przejście stanów w poszczególnych klasach;operacje wywołane przez metody klasy generalizacji
173;Identyfikacja i definiowanie pól klasy polega miedzy innymi na wprowadzeniu:;wszystkich pól (atrybutów) opisujących możliwe stany obiektów danej klasy;związków generalizacji - specjalizacji pomiędzy obiektami danej klasy;relacji agregacji wśród obiektów danej klasy;wszystkich obiektów definiujących dana klasę
174;Do metod realizowanych w modelu obiektowym zaliczamy miedzy innymi:;Metody ustawiania związków pomiędzy obiektami, destruktory, konstruktory;Konstruktory, destruktory, metody pobierania wartości pól, przerwania;Metody edycji pól, konstruktory, procesy, destruktory;Konstruktory, metody pobierania/ustawiania wartości pól, obsługa zlecenia
175;Agregacja w UML-u jest:;rodzajem asocjacji wskazującej na zawieranie się klas; związkiem pomiędzy pakietami;relacja mnogościowa jeden do jednego;związkiem generalizacji - specjalizacji
176;Wymagania w języku naturalnym przyjmują postać: System czekowy ma na celu obsługę kont czekowych. System ten musi mieć możliwość przetwarzania takich transakcji na koncie jak wplata i wyplata dla wielu kont... Potencjalnymi klasami są:;system czekowy, konto czekowe, transakcja, wplata, wyplata, czek;system czekowy, cel, transakcja, wplata, wyplata, czek;system czekowy, konto czekowe, cele systemu, wplata, wyplata, czek;system czekowy, konto czekowe, możliwości systemu, wplata, wyplata, czek
177;Główne pojęcia obiektowości to:;klasy, obiekty, dziedziczenie, polimorfizm;atrybuty, obiekty, pola, struktury;struktury, dane pasywne, dane aktywne, obiekty;klasy obiektów, struktury danych, metody, funkcje
178;Obligatoryjność związków obiektów klas oznacza:;konieczność utworzenia klasy obligatoryjnej;konieczność tworzenia uzupełnienia danego obiektu;konieczność utworzenia związku agregacji;żadna z wyżej wymienionych
179;Związek agregacji w grupie studenckiej polega na tym, ze:;cala grupę studencka stanowi ścisłe określona grupa osób;w skład grupy wchodzi wielu studentów i wiele studentek;skład grupy studenckiej jest zmienny;w skald grupy studenckiej wchodzi co najmniej 25 osób
180;Korzystając z języka UML nie można:;stworzyć modelu dowolnego bytu;stworzyć modelu systemu obiektowego;stworzyć modelu procesu gospodarczego;stworzyć modelu przepływu danych
181;DFD's (data flow diagrams) są podstawa:; modelowania proceduralnego / strukturalnego;modelowania obiektowego;modelowania matematycznego;modelowania komputerowego
182;Wyodrębnij cztery klasy z poniższego opisu problemu: Klient korzysta z systemu, aby pobrać, i aby sprawdzić stan swojego konta. Klient musi włożyć kartę do bankomatu, wprowadzić swój numer PIN. Klient posiada numer PIN, nazwisko i imię, numer konta. Drukując saldo klient oczekuje otrzymania aktualnego stanu jego konta, oraz historie transakcji.;Klient, konto, bankomat, system;Klient, konto, PIN, historia;System bankowy Sumes, konto nr 1010101010101, Jan Kowalski, bank PKO BP;Konto, system, transakcja, drukowanie
183;Wyodrębnij pary klasa (K) i jej obiekt (O): Klient Jan Kowalski przychodzi do bankomatu nr 100 przy ul. Wrocławskiej by pobrać pieniądze. Podaj nr PIN, oraz kwotę do wypłaty. Bankomat sprawdza poprawność danych i wypłaca pieniądze:;K-Klient O-Jan Kowalski, K-bankomat O-nr100;Bankomat O-wyplata pieniędzy;K-Operacja O-Kwota, K-System O-klient;K-Pieniadze O-euro, K-Dane O-PIN
184;Modelowanie strukturalne i modelowanie proceduralne:;to jest to samo;roznia sie podejsciem do statyki systemu;rozróżnia się podejściem do dynamiki systemu;uzupelniaja sie na wzajem
185;W której fazie następuje wybór języka programowania wykorzystywanego w projekcie:;w fazie implementacji;w fazie strategicznej;w fazie określania wymagań;w żadnej z powyższych
186;Wyodrębnij obiekty (O) i właściwości (W) Klient Jan Kowalski przychodzi do bankomatu nr 100 przy ul. Wrocławskiej by pobrać pieniądze. Podaj nr PIN, oraz kwotę do wypłaty. Bankomat sprawdza poprawność danych i wypłaca pieniądze.;O-Jan Kowalski, W-PIN=1010, O-bankomat 100 W-adres="Wroclawska;O-Jan Kowalski, W- PIN=1010, O-bankomat W-wyplac pieniadze; O-Klient, W-Jan Kowalski, O-bankomat W-kolor;O-Jan Kowalski, W-wyplac pieniądze, O-bankomat W-adres="Wroclawska"
187;Który z poniższych języków został stworzony do modelowania systemów obiektowych:;UML;CSL;C#;XML
188;Diagramy sekwencji w modelowaniu dynamiki systemu pokazują:;następstwo czasowe w sekwencji komunikatów wymienianych miedzy obiektami;przebieg czynności w sekwencji zmiany stanu obiektów;zmianę stanu obiektów;następstwo stanów obiektów w sekwencji czasu
189;Diagram opisu interakcji jest:;obrazowaniem kolejnych czynności w ciągu kolejnych interakcji;polaczeniem diagramu interakcji i następstw;obrazowaniem stanów obiektów w sekwencji komunikatów;polaczeniem diagramu pakietów i komponentów
190;OMG jest organizacja o nazwie:;Object Management Group;Object Marketing Goal;Object Management Global;Object Marketing Group
191;Tworzenie systemów sterowane modelami polega na transformacji kolejno pomiędzy modelami?;środowiska, wymagań, systemu, podsystemu;matematycznym, logicznym, środowiskiem;logicznym, fizycznym, rzeczywistym;środowiska, logicznym, matematycznym, numerycznym
192;Modele w tworzeniu oprogramowania sterowanego modelami stanowią:;zestawy odpowiednich diagramów struktury i dynamiki systemu;opis rzeczywistego zachowania się systemu;opis logicznego zachowania się systemu;zestawy odpowiednich funkcjonalności systemu
193;Architektura trójwarstwowa dla systemu "obsługi zamówień" najczęściej obejmuje podsystemy:;interfejs użytkownika, reguły biznesowe, baza danych;przyjmowania zamówień, wysyłania przesyłek, obsługi płatności;interfejs użytkownika, wysyłanie przesyłek, baza danych;przyjmowanie zamówień, obsługa płatności, interfejs użytkownika
194;Wzorzec potoków i filtrów bazuje na:;zależności poszczególnych podsystemów od strumienia danych na stosie;swobodnym dostępie do dowolnych danych;niezależności podsystemów od strumienia danych;ścisłej zależności poszczególnych podsystemów
195;Wzorzec architektury obiektowej bazuje na:;podsystemach zdefiniowanych wokół danych i związanych z nimi funkcji;zależności poszczególnych podsystemów od strumienia danych na stosie;ścisłej zależności poszczególnych podsystemów;swobodnym dostępie do dowolnych danych
196;Która z poniższych cech nie jest charakterystyczna dla programowania ekstremalnego:;podejście kaskadowe;programowanie w parach;testy jednostkowe;bezpośrednia współpraca z klientem
197;Sformułowanie 'Make it work, make it right, make it fast' jest charakterystyczne dla:;programowania ekstremalnego;modelu spiralnego wytwarzania oprogramowania;modelowania aspektowego;modelu kaskadowego wytwarzania oprogramowania
198;Na diagramie UML związek agregacji jest oznaczony:;odcinkiem zakończonym pustym rombem;odcinkiem zakończonym wypełnionym rombem;odcinkiem zakończonym okręgiem;tylko odcinkiem
199;Odcinkiem zakończonym pełnym rombem na diagramie UML oznacza się:;kompozycję;agregacje;skojarzenie;dziedziczenie
200;W opisie przypadku użycia wyzwalacz to:;Zdarzenie powodujące rozpoczęcie przypadku użycia;Warunki spełnione po pomyślnym wykonaniu głównego scenariusza przypadku użycia;zdarzenie powodujące zakończenie przypadku użycia;warunki które musza być spełnione przed wykonaniem przypadku użycia
201;Na diagramie klas UML oznaczenia widoczności pól +,#,- oznaczają kolejno:;public, protected, private;private, protected, static;public, private, protected;public, abstract, protected
202;Metoda abstrakcyjna jest to:;metoda nie posiadająca implementacji;metoda dziedziczona z klasy abstrakcyjnej;metoda niewidoczna dla innych klas;nie istnieje takie pojęcie
203; Pola oznaczone znaczkiem widoczności #:;są widoczne tylko w ramach klasy i klas pochodnych;są widoczne tylko w ramach jednej klasy;są widoczne wszędzie;są niewidoczne
204;Klasę abstrakcyjna na diagramie UML oznacza się poprzez:;czcionka pochyla;podkreślenie;pogrubienie;dodanie słówka abstract
205;Związek uogólnienia na diagramach UML oznacza się:;odcinkiem zakończonym trójkątem wskazującym klasę nadrzędna – dziedziczenie;odcinkiem zakończonym trójkątem wskazującym klasę podrzędna;odcinkiem zakończonym rombem wskazującym klasę nadrzędna;odcinkiem zakończonym rombem wskazującym klasę podrzędna
206;Przypadki użycia na diagramach UML oznacza się jako:;owale;prostokąty;romby;trapezy
207;Aktorów na diagramie UML oznacza się jako:;schematyczna postać;schematyczna głowę;wypełniony kwadrat;wypełniony okrąg
208;Gwarancje powodzenia przypadków użycia to:;warunki spełnione po pomyślnym wykonaniu scenariusza powodzenia;warunki spełnione po uruchomieniu przypadku użycia;warunki jakie zapewnia system by przypadek zakończył się powodzeniem;warunki początkowe, wymagany by przypadek mógł się rozpocząć
209;Co to jest diagram DFD?:;diagram przepływu danych;diagram struktury bazy danych;diagram opisujący strukturę klas;diagram przypadków użycia
210;Celem fazy projektowania jest: (most między specyfikowaniem a kodowaniem);Transformacja pomiędzy modelami opisowymi i specyfikacji?;Transformacja pomiędzy modelami opisowymi i wymagań?;Transformacja pomiędzy modelami specyfikacji i numerycznym?;Transformacja pomiędzy modelami numerycznym i cyfrowym?
211;Klasa jest:;Abstrakcyjnym typem danych;Rzeczywistym typem danych;Rozproszonym typem danych;Skupionym typem danych
212;Atestowanie jest procesem związanym z:;Prowadzeniem procesy testowania przez klienta;Prowadzeniem procesy testowania przez auditora projektu;Prowadzeniem procesy testowania przez użytkowników systemu;Prowadzeniem procesy testowania przez członków zespołu projektowego
213;Model fizyczny systemu stanowiący o jego architekturze fizycznej jest reprezentowany przez:;Model (diagram) wdrożenia;Model (diagram) czynności;Model (diagram) przypadków użycia;Model (diagram) pakietów i komponentów
214;Obiekt w modelowaniu obiektowym reprezentuje:;Abstrakcyjny typ danych;Rzeczywisty typ danych;Hierarchiczny typ danych;Uwarunkowany typ danych
215;Model spiralny Boehma wymaga definicji procesy ewolucyjnego w czterech aspektach jak poniżej;planowania, analiza ryzyka, konstrukcja iteracji, atestowanie;planowanie, projektowanie, konstrukcja iteracji, testowanie;modelowanie, projektowanie, kodowanie, atestowanie;modelowanie, kodowanie, testowanie, utrzymanie
216;Diagram „use case” w UML służy do określenia;Scenariuszy definiujących funkcjonalność systemu;Użytkowników systemu;Parametrów systemu odpowiedzialnych za poprawne działanie systemu;Jedynie odpowiedzi na sytuacje awaryjne
217;Proces doboru technologii implementacji odbywa się na etapie:;budowania modelu specyfikacji;budowania modelu numerycznego;transformacji modelu numerycznego do modelu cyfrowego;transformacji systemu do użytkownika
218;Głównym zadaniem fazy projektu jest:;Jasne określenia jak System ma realizować zadania;Jasne określenie co? System ma robić;Stwierdzenie jak duży będzie system;Określenie co? I jak? Ma system robić
219;Testy funkcjonalne obejmują:;Testowanie systemu jako czarnej skrzynki o określonej funkcjonalności;Testowanie poszczególnych metod w klasach;Testowanie założeń systemu;Testowanie jako białej skrzynki z pełną interpretacją kolejnych instrukcji
220;Czy wymagania dla systemu powinny być poddane analizę w FAZIE KODOWANIA;Nie;Tak;To zależy od dziedziny problemu;Czasami
221;UML pozwala na graficzna budowę:;Modeli numerycznych zdekomponowanego modelu opisowego;Modeli statycznych zdekomponowanego modelu rzeczywistego;Modeli dynamicznych zdekomponowanego modelu opisowego;Modeli praktycznych zdekomponowanego modelu opisowego
222;Podejście słownikowe do budowy modelu obiektowego wymaga:;Zwyczajowego podejścia do modelu opisowego;Identyfikacji dziedziny słownikowej problemu;Modeli praktycznych zdekomponowanego modelu opisowego;Identyfikacji rzeczowników jako obiektów
223;Co to COCOMO?;Model szacowania liczby osobogodzin w procesie tworzenia oprogramowania;Kura na patyku;Model obliczający liczbę studentów potrzebnych do wkręcenia żarówki;Model pociągu papieskiego
224;Co to KDSI?;Szacowana liczba linii kodu;Szacowana liczba studentów do ujebania;Małpa z dupom;Champion w lolu
225;W inżynierii oprogramowania nakład pracy mierzymy:;W osobogodzinach pracy;Czasem niezbędnym do zakłócenia budowy systemu informatycznego;Złożoności postawionego zadania;Wielkości poniesionych kosztów
226;Budowa systemów informatycznych modelujących wycinek rzeczywistości składa się z dwóch podstawowych procesów:;analizy i syntezy;kodowania i testowania;zbierania wymagań i wdrożenia;specyfikacji i modelowania
227;Macierz śladu pozwala na:;sprawdzenie realizacji wszystkich wymagań przez podsystemy;jednoznaczne odwzorowanie kodu systemu na jego wymagania;właściwy dobór technologii implementacyjnej;odpowiednią specyfikację wymagań systemu
228;Testy statyczne bazują na:;analizie kodu;wynikach testowych uruchomień programu;analizie dokumentacji;na wynikach testów akceptacji-alfa
229;Dekompozycja pozwala na jednoznaczną transformacje pomiędzy:;modelem opisowym a modelem specyfikacji;modelem specyfikacji a modelem numerycznym;modelem numerycznym a modelem cyfrowym;modelowaną rzeczywistością a modelem cyfrowym
230;Model logiczny systemu stanowiący o jego architekturze logicznej jest reprezentowany przez:;model (diagram) czynności;model (diagram) wdrożenia;model (diagram) przypadków użycia;model (diagram) pakietów i komponentów
231;Szacowanie występujące kosztów oprogramowania obejmuje:;dekompozycją oprogramowania do jego elementarnej funkcjonalności i jej wartościowanie;model numeryczny zdekomponowanego systemu (modelu opisowego);model statyczny zdekomponowanego systemu (modelu rzeczywistego);ocenie kosztów oprogramowania
232;Modelowanie strukturalne i modelowanie proceduralne:; to są synonimy tego samego typu modelowania;To są synonimy tego samego typu wdrożenia;Różnią się podejściem do statyki systemu;Różnią się podejściem do dynamiki systemu
233;W której fazie następuje wybór języka programowania wykorzystywanego w fazie kodowania:;w fazie strategicznej;w fazie określenia wymagań;w fazie implementacji;w żadnej z powyższych
234;Transformacja od środowiska do kodu obejmuje kolejne modele (wskaż właściwą sekwencję):;środowisko, model środowiska, model kodu, model cyfrowy;Środowisko, model numeryczny, kod, model cyfrowy;środowisko, model matematyczny, model numeryczny, kod;środowisko, opis numeryczny, model kodu, kod
235;Proces SYNTEZY oprogramowania obejmuje fazy transformacji pomiędzy modelami:;cyfrowym a wdrożeniem wraz z testowaniem;numerycznym a cyfrowym wraz z testowaniem;specyfikacji a numerycznym wraz z testowaniem;opisowym a specyfikacji wraz z testowaniem
236;Który z języków został zaprojektowany do graficznego modelowania systemów:;UML;C#;CSL;Fortran
237;Model kaskadowy wytwarzania oprogramowania z rozbudowanym testowaniem wymaga:;wprowadzenia fazy testowania systemu po jego implementacji;wprowadzenia testowania elementów każdej fazy modelu kaskadowego;wprowadzenia testowania jedynie zbudowanych modeli numerycznych;wprowadzenia jedynie szczegółowej analizy opracowanego kodu systemu
238;Testy jednostkowe w fazie testowania modelu cyfrowego obejmują: (odpowiedź nieznana);Testowanie interfejsu systemu cyfrowego;Testowanie metod dopuszczanych w klasach systemu;Testowanie struktury klas i obiektów modelu cyfrowego;Testowanie połączeń pomiędzy poszczególnymi modułami
239;Hierarchia wymagań pozwala na zidentyfikowanie:;Architektury logicznej systemu;Architektury fizycznej systemu;Struktury statycznej systemu;Struktury dynamicznej systemu
240;Modele (diagramy) sekwencji w modelowaniu dynamiki systemu pokazują:;Następstwo czasu mierzone zdarzeniami w sekwencji komunikatów;Przebieg czynności w sekwencji zmiany stanu obiektów;Zmianę stanu obiektów;Następstwo stanów obiektów w sekwencji czasu
241;Diagramy sekwencji w modelowaniu dynamiki systemu pokazują:;Następstwo czasowe w sekwencji komunikatów wymienionych między obiektami;Przebieg czynności w sekwencji zmiany stanu obiektów;Zmianę stanu obiektów;Następstwo stanów obiektów w sekwencji czasu
242;Model COCOMO dotyczy:;Szacowania czasu budowania systemu informatycznego;Szacowania złożoności systemu informatycznego;Szacowania bezpieczeństwa systemu informatycznego;Szacowania kosztów wytworzenia systemu informatycznego
243;Czy wymagania dla systemu powinny być poddane syntezie w Fazie Kodowania?;Tak;Nie;To zależy od dziedziny problemu;Czasami
244;W inżynierii oprogramowania nakład pracy mierzymy;zlozonoscia postawionego zadania;czasem niezbednym do zakonczenia budowy systemu informatycznego;w osobogodzinach pracy;wielkoscia poniesionych kosztow